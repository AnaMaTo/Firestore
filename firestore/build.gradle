/*
 * Copyright (c) 2018 Otalia Studios. Author: Mattia Iavarone.
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

apply plugin: 'org.jetbrains.dokka-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

ext {
    libVersion = rootProject.ext.libVersion
    libGroup = rootProject.ext.libGroup
    libName = 'Firestore'
    libDescription = 'The efficient wrapper for Firestore model data.'
    libArtifactId = 'firestore'
    githubUrl = rootProject.ext.githubUrl
    githubGit = rootProject.ext.githubGit
    libLicenseName = rootProject.ext.libLicenseName
    libLicenseUrl = rootProject.ext.libLicenseUrl
}

version = libVersion
group = libGroup
archivesBaseName = libArtifactId

android {

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName libVersion
    }

    dataBinding.enabled = true

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    api "com.google.firebase:firebase-firestore:$firestoreVersion"
    api "com.jakewharton.timber:timber:$timberVersion"
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task dokkaJar(type: Jar, dependsOn: dokka) {
    archiveClassifier.set('javadoc')
    from dokka.outputDirectory
}

artifacts {
    archives dokkaJar
    archives sourcesJar
}


install.repositories.mavenInstaller.pom.project {
    name libName
    description libDescription
    url githubUrl
    groupId libGroup
    artifactId libArtifactId
    version libVersion
    packaging 'aar'
    scm {
        connection githubGit
        url githubUrl
    }
    licenses {
        license {
            name libLicenseName
            url libLicenseUrl
        }
    }
    developers {
        developer {
            id 'natario'
            name 'Mattia Iavarone'
        }
    }
}

def bintrayUser
def bintrayKey
def hasBintray = false
if (System.getenv('TRAVIS') == 'true') {
    if (System.getenv('TRAVIS_SECURE_ENV_VARS') == 'true') {
        bintrayUser = System.getenv("BINTRAY_USER")
        bintrayKey = System.getenv("BINTRAY_KEY")
        hasBintray = true
    }
} else {
    Properties props = new Properties()
    props.load(project.rootProject.file('local.properties').newDataInputStream())
    bintrayUser = props.getProperty('bintray.user')
    bintrayKey = props.get('bintray.key')
    hasBintray = true
}

if (hasBintray) {
    bintray {
        // https://github.com/bintray/gradle-bintray-plugin
        user = bintrayUser
        key = bintrayKey
        configurations = ['archives']
        override = true
        publish = true
        pkg {
            repo = 'android'
            name = libName
            licenses = [libLicenseName]
            vcsUrl = githubGit
            desc = libDescription
            version {
                name = libVersion
                desc = libName + ' v' + libVersion
                released = new Date()
                vcsTag = 'v' + libVersion
            }
        }
    }
}